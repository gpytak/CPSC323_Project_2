Token: IDENTIFIER 	Lexeme: x
  <Statement> -> <Assign>
  <Assign> -> <Identifier> = <Expression>
Token: OPERATOR 	Lexeme: =
Token: SEPARATOR 	Lexeme: (
  <Expression> -> <Term> <Expression Prime>
  <Term> -> <Factor> <Term Prime>
  <Factor> -> ( <Expression> )
Token: IDENTIFIER 	Lexeme: a
  <Expression> -> <Term> <Expression Prime>
  <Term> -> <Factor> <Term Prime>
  <Factor> -> <Identifier>
Token: OPERATOR 	Lexeme: *
  <Term Prime> -> * <Factor> <Term Prime>
Token: IDENTIFIER 	Lexeme: b
  <Factor> -> <Identifier>
Token: SEPARATOR 	Lexeme: )
  <Term Prime> -> <Epsilon>
  <Expression Prime> -> <Epsilon>
Token: OPERATOR 	Lexeme: +
  <Term Prime> -> <Epsilon>
  <Expression Prime> -> + <Term> <Expression Prime>
Token: IDENTIFIER 	Lexeme: c
  <Term> -> <Factor> <Term Prime>
  <Factor> -> <Identifier>
Token: OPERATOR 	Lexeme: /
  <Term Prime> -> / <Factor> <Term Prime>
Token: IDENTIFIER 	Lexeme: d
  <Factor> -> <Identifier>
